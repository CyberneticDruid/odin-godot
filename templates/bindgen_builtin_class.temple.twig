/* This file is generated by godin bindgen - DO NOT EDIT! */
package variant

import __bindgen_gde "../gdextension"

{{ this.odin_type }} :: struct {
    _opaque: __{{ this.odin_type }}OpaqueType
}

{% if builtin_type, is_builtin := this.type.(NewStateClass).builtin_info.(NewStateClassBuiltin); is_builtin %}
when __bindgen_gde.BUILD_CONFIG == "float_32" {
    __{{ this.odin_type }}OpaqueType :: [{{int(builtin_type.float_32_size)}}]u8
} else when __bindgen_gde.BUILD_CONFIG == "float_64" {
    __{{ this.odin_type }}OpaqueType :: [{{int(builtin_type.float_64_size)}}]u8
} else when __bindgen_gde.BUILD_CONFIG == "double_32" {
    __{{ this.odin_type }}OpaqueType :: [{{int(builtin_type.double_32_size)}}]u8
} else when __bindgen_gde.BUILD_CONFIG == "double_64" {
    __{{ this.odin_type }}OpaqueType :: [{{int(builtin_type.double_64_size)}}]u8
}

{% for state_enum in this.type.(NewStateClass).enums %}

{% if !state_enum.odin_skip %}
{% embed "bindgen_enum.temple.twig" with state_enum.type.(NewStateEnum) %}
{% end %}

{% end %}

{% for method in this.type.(NewStateClass).methods %}
{{ method.odin_name }} :: proc(self: {{ this.odin_type }}
{% for argument in method.arguments %}, {{ argument.name }}: {{ argument.type.odin_type }}
{% end %})
{% if return_type, has_return_type := method.return_type.(^NewStateType); has_return_type %} -> {{ return_type.odin_type }}{% end %} {

}

{% end %}

__{{ this.odin_type }}_init :: proc() {
    function_name: __StringNameOpaqueType
{% for method in this.type.(NewStateClass).methods %}
    function_name = __bindgen_gde.string_name_new_with_latin1_chars(cast(__bindgen_gde.StringNamePtr)function_name, "{{ method.godot_name }}", true)
    __{{ method.odin_name }}__backing_proc = __bindgen_gde.variant_get_ptr_builtin_method(__bindgen_gde.VariantType.{{ this.odin_type }}, cast(__bindgen_gde.StringNamePtr)function_name, {{ i64(method.hash) }})
{% end %}
}

{% for method in this.type.(NewStateClass).methods %}
__{{ method.odin_name }}__backing_proc: __bindgen_gde.PtrBuiltInMethod
{% end %}
{% end %}
