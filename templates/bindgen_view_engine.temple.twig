package {{ this.snake_name }}

{% if this.name == "Object" %}
import __bindgen_pkg "godot:variant"
{% else %}
import __bindgen_pkg "godot:{{ this.parent_package }}"
{% end %}
{% for name, import_ in this.imports %}
import {{ name }} "{{ import_.path }}"
{% end %}

{% for constant in this.file_constants %}
{{ constant.name }} :: {{ constant.value }}
{% end %}

{% for enum_ in this.enums %}
{% embed "bindgen_view_enum.temple.twig" with enum_ %}
{% end %}

{% for bit_field_ in this.bit_fields %}
{% embed "bindgen_view_bit_field.temple.twig" with bit_field_ %}
{% end %}

name_ref :: proc "contextless" () -> ^__bindgen_var.String_Name {
    return &__class_name
}

name :: proc "contextless" () -> __bindgen_var.String_Name {
    return __class_name
}

new_{{ this.snake_name }} :: proc "contextless" () -> __bindgen_pkg.{{ this.name }} {
    return cast(__bindgen_pkg.{{ this.name }})__bindgen_gde.classdb_construct_object(name_ref())
}

// methods
{% for method in this.static_methods %}
{% if return_type, has_return_type := method.return_type.(string); has_return_type %}
{{ method.name }} :: proc "contextless" (
{% for arg in method.args %}
    {{ arg.name }}_: {{ arg.type }},
{% end %}
) -> (ret: {{ return_type }}) {
{% for arg in method.args %}
    {{ arg.name }}_ := {{ arg.name }}_
{% end %}
    args := []__bindgen_gde.TypePtr {
{% for arg in method.args %}
        &{{ arg.name }}_,
{% end %}
    }
    __bindgen_gde.object_method_bind_ptrcall(__{{ method.name }}_method_ptr, nil, raw_data(args), &ret)
    return
}

{% else %}
{{ method.name }} :: proc "contextless" (
{% for arg in method.args %}
    {{ arg.name }}_: {{ arg.type }},
{% end %}
) {
{% for arg in method.args %}
    {{ arg.name }}_ := {{ arg.name }}_
{% end %}
    args := []__bindgen_gde.TypePtr {
{% for arg in method.args %}
        &{{ arg.name }}_,
{% end %}
    }
    __bindgen_gde.object_method_bind_ptrcall(__{{ method.name }}_method_ptr, nil, raw_data(args), nil)
}

{% end %}
{% end %}

{% for method in this.instance_methods %}
{% if return_type, has_return_type := method.return_type.(string); has_return_type %}
{{ method.name }} :: proc "contextless" (
    self: ^__bindgen_pkg.{{ this.name }},
{% for arg in method.args %}
    {{ arg.name }}_: {{ arg.type }},
{% end %}
) -> (ret: {{ return_type }}) {
{% for arg in method.args %}
    {{ arg.name }}_ := {{ arg.name }}_
{% end %}
    args := []__bindgen_gde.TypePtr {
{% for arg in method.args %}
        &{{ arg.name }}_,
{% end %}
    }
    __bindgen_gde.object_method_bind_ptrcall(__{{ method.name }}_method_ptr, self, raw_data(args), &ret)
    return
}

{% else %}
{{ method.name }} :: proc "contextless" (
    self: ^__bindgen_pkg.{{ this.name }},
{% for arg in method.args %}
    {{ arg.name }}_: {{ arg.type }},
{% end %}
) {
{% for arg in method.args %}
    {{ arg.name }}_ := {{ arg.name }}_
{% end %}
    args := []__bindgen_gde.TypePtr {
{% for arg in method.args %}
        &{{ arg.name }}_,
{% end %}
    }
    __bindgen_gde.object_method_bind_ptrcall(__{{ method.name }}_method_ptr, self, raw_data(args), nil)
}

{% end %}
{% end %}

init :: proc "contextless" () {
    __class_name = __bindgen_var.new_string_name_cstring("{{ this.godot_name }}", true)
    __name: __bindgen_var.String_Name

    {% for method in this.instance_methods %}
    __name = __bindgen_var.new_string_name_cstring("{{ method.name }}", true)
    __{{ method.name }}_method_ptr = __bindgen_gde.classdb_get_method_bind(&__class_name, &__name, {{ i64(method.hash) }})
    {% end %}
    {% for method in this.static_methods %}
    __name = __bindgen_var.new_string_name_cstring("{{ method.name }}", true)
    __{{ method.name }}_method_ptr = __bindgen_gde.classdb_get_method_bind(&__class_name, &__name, {{ i64(method.hash) }})
    {% end %}
}

@(private = "file")
__class_name: __bindgen_var.String_Name

{% for method in this.instance_methods %}
__{{ method.name }}_method_ptr: __bindgen_gde.MethodBindPtr
{% end %}
{% for method in this.static_methods %}
__{{ method.name }}_method_ptr: __bindgen_gde.MethodBindPtr
{% end %}