{% for operator_name, operator in this.operators %}
{% for overload in operator.overloads %}
{{ overload.proc_name }} :: proc(self: {{ this.odin_name }}{% if len(overload.right_type_str) > 0 %}, other: {{ overload.right_type_str }}{% end %}) -> (ret: {{ overload.return_type.prio_type }}) {
    using gdextension
    self := self
{% if len(overload.right_type_str) > 0 %}
    other := other
{% end %}
    return call_builtin_operator_ptr({{ overload.backing_func_name }}, cast(TypePtr)&self._opaque, cast(TypePtr){% if overload.right_type_is_ref %}&{% end %}{{ overload.right_type_ptr_str }}, {{ overload.return_type.prio_type }})
}
{% end %}
{{ operator.proc_name }} :: proc{
{% for overload in operator.overloads %}
    {{ overload.proc_name }},
{% end %}
}
{% end %}