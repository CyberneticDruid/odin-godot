{{ this.base_constructor_name }} :: proc{
{% for constructor in this.constructors %}
    {{ constructor.proc_name }},
{% end %}
{% if this.is_special_string_type %}
    {{ this.base_constructor_name }}_odin,
    {{ this.base_constructor_name }}_cstring,
{% end %}
}

{% for constructor in this.constructors %}
{{ constructor.proc_name }} :: proc({% for arg, i in constructor.arguments %}{% if i > 0 %}, {% end %}{{ arg.name }}: {{ arg.arg_type.prio_type }}{% end %}) -> (ret: {{ this.odin_name }}) {
    using gdextension
{% for arg in constructor.arguments %}
    {{ arg.name }} := {{ arg.name }}
{% end %}
    ret = {{ this.odin_name }}{}
    call_builtin_constructor({{ constructor.backing_proc_name }}, cast(TypePtr)&ret._opaque{% for arg in constructor.arguments %}, cast(TypePtr)&{{ arg.name }}{% if arg.arg_type.pod_type == nil %}._opaque{% end %}{% end %})
    return
}

{% end %}
{% if this.is_special_string_type %}
{{ this.base_constructor_name }}_odin :: proc(from: string, allocator := context.allocator) -> (ret: {{ this.odin_name }}) {
    using gdextension
    cstr := strings.clone_to_cstring(from, allocator)
    ret = {{ this.odin_name }}{}
    interface.string_new_with_latin1_chars_and_len(cast(StringPtr)&ret._opaque, cstr, cast(i64)len(from)) // TODO: this may need to be len(cstr)
    return
}

{{ this.base_constructor_name }}_cstring :: proc(from: cstring) -> (ret: {{ this.odin_name }}) {
    using gdextension
    ret = {{ this.odin_name }}{}
    interface.string_new_with_latin1_chars(cast(StringPtr)&ret._opaque, from)
    return
}
{% end %}